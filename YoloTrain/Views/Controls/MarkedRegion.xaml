<mvvm:UserControlView 
    x:Class="YoloTrain.Views.Controls.MarkedRegion"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:local="clr-namespace:YoloTrain.Views.Controls"
    xmlns:mvvm="clr-namespace:YoloTrain.Mvvm"
    mc:Ignorable="d" 
    d:DesignHeight="450"
    d:DesignWidth="800"
>
    <mvvm:UserControlView.Resources>
        <!-- TODO (judwhite): this doesn't work; template binding TextBlock's Foreground is a PITA -->
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Path=(TextElement.Foreground)}" />
        </Style>
    </mvvm:UserControlView.Resources>

    <Grid Margin="0">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <ToggleButton 
            Grid.Row="0" 
            Grid.Column="0" 
            VerticalAlignment="Stretch" 
            HorizontalAlignment="Stretch" 
            HorizontalContentAlignment="Left"
            VerticalContentAlignment="Top" 
            BorderThickness="0"
            Margin="0" 
            IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mvvm:UserControlView}}, Path=IsSelected}"
            Command="{Binding SelectRegionCommand}" 
            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mvvm:UserControlView}}, Path=RegionIndex, Mode=OneWay}"
            Style="{DynamicResource RegionButtonStyle}" 
        >
            <ToggleButton.Resources>
                <Style x:Key="FocusVisual">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="Button.Static.Background" Color="LightBlue" Opacity="0.5"/>
                <SolidColorBrush x:Key="Button.Static.Border" Color="Blue"/>
                <SolidColorBrush x:Key="Button.MouseOver.Background" Color="DodgerBlue" Opacity="0.5"/>
                <SolidColorBrush x:Key="Button.MouseOver.Border" Color="Blue"/>
                <SolidColorBrush x:Key="Button.Pressed.Background" Color="DodgerBlue" Opacity="0.5"/>
                <SolidColorBrush x:Key="Button.Pressed.Border" Color="Blue"/>
                <SolidColorBrush x:Key="Button.IsChecked.Background" Color="DarkBlue" Opacity="0.5"/>
                <SolidColorBrush x:Key="Button.IsChecked.Border" Color="#FF2C628B"/>
                <SolidColorBrush x:Key="Button.IsChecked.Foreground" Color="#FFF4F4F4"/>
                <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" Opacity="0.5"/>
                <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                <Style x:Key="RegionButtonStyle" TargetType="{x:Type ToggleButton}">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                    <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                    <ContentPresenter 
                                        x:Name="contentPresenter" 
                                        Focusable="False" 
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        Margin="{TemplateBinding Padding}" 
                                        RecognizesAccessKey="True" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        TextElement.Foreground="Black"
                                    />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                        <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.IsChecked.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.IsChecked.Border}"/>
                                        <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.IsChecked.Foreground}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ToggleButton.Resources>

            <ToggleButton.Content>
                <TextBlock
                    Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mvvm:UserControlView}}, Path=Text, Mode=OneWay}"
                    FontStretch="Condensed"
                    FontWeight="Bold"
                    LineStackingStrategy="BlockLineHeight"
                    FontSize="11"
                    LineHeight="10"
                    Padding="2"
                    TextWrapping="Wrap"
                    IsHitTestVisible="False"
                >
                </TextBlock>
            </ToggleButton.Content>
        </ToggleButton>

    </Grid>
</mvvm:UserControlView>
